import gurobipy as gp
import json
from gurobipy import *

# Create a new model
bianchang = [
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    21,
    36,
    81,
    66,
    51,
    36,
    51,
    66,
    36,
    81,
    36,
    36,
    36,
    51,
    36,
    51,
    36,
    36,
    36,
    111,
    36,
    66,
    36,
    51,
    36,
    36,
    111,
    36,
    36,
    36,
    36,
    36,
    36,
    36,
    96,
    36,
    51,
    36,
    36,
    126,
    36,
    36,
    36,
    36,
    36,
    36,
    36,
    51,
    36,
    36,
    36,
    36,
    51,
    36,
    36,
    66,
    36,
    36,
    36,
    36,
    36,
    36,
    36,
    36,
    36,
    36,
    36,
    36,
    36
]
center = [
    [
        623.6440837113299,
        180.52625290531762
    ],
    [
        546.524318400614,
        115.32751384319268
    ],
    [
        1010.3188125364229,
        293.0900839557883
    ],
    [
        352.4909888494475,
        142.51701828845697
    ],
    [
        486.5138133965739,
        281.89174243481614
    ],
    [
        333.6131141134594,
        451.0156722568025
    ],
    [
        663.4889305480121,
        153.79127748352371
    ],
    [
        198.18989786327236,
        434.6197430761102
    ],
    [
        519.0092613121137,
        78.06068986727004
    ],
    [
        1117.6294524186321,
        421.14385304580816
    ],
    [
        567.0142013502315,
        509.95565596671037
    ],
    [
        481.13855113033856,
        308.9757011718251
    ],
    [
        870.8813517902253,
        533.7002571685251
    ],
    [
        113.03481413865268,
        512.9035010330383
    ],
    [
        1293.3922185369133,
        293.90722626125347
    ],
    [
        729.2597588554356,
        523.2032469923505
    ],
    [
        126.27580608529951,
        104.83744208422314
    ],
    [
        341.6968265900699,
        185.11457386600057
    ],
    [
        952.5680301736228,
        544.9574211067434
    ],
    [
        75.89599156054638,
        10
    ],
    [
        1361.5648751257334,
        406.75441694117154
    ],
    [
        1447.756795946533,
        460.4505925788561
    ],
    [
        1256.4650565775905,
        525.6390076105615
    ],
    [
        1230.6765714385879,
        540.9241944213097
    ],
    [
        337.3602833705007,
        13.412656322523729
    ],
    [
        1212.8693206911082,
        516.1623209427721
    ],
    [
        1408.060579090073,
        512.4619292947098
    ],
    [
        768.2687917836512,
        471.20163868977687
    ],
    [
        50,
        37.62606046031196
    ],
    [
        1408.595288272062,
        486.3613906208124
    ],
    [
        845.3149980700438,
        162.31417908864455
    ],
    [
        807.640652012645,
        191.03644071317316
    ],
    [
        1019.3416121796773,
        249.33864512798175
    ],
    [
        747.4272823188543,
        240.95574772898684
    ],
    [
        483.95492433983907,
        240.59886878583484
    ],
    [
        562.0359848948045,
        269.0229163070248
    ],
    [
        501.097711790469,
        158.53549426421156
    ],
    [
        1045.6482426408852,
        278.26031436950814
    ],
    [
        369.24301427620173,
        69.01123136248265
    ],
    [
        588.952044261822,
        195.27051485908459
    ],
    [
        1110.151095780947,
        283.995041582546
    ],
    [
        390.3939813433447,
        478.54536465044197
    ],
    [
        1097.367029230164,
        312.29122646426333
    ],
    [
        604.6643722972071,
        334.163718508798
    ],
    [
        1064.7909774032905,
        195.18823725948045
    ],
    [
        903.2072281254672,
        293.16008377303984
    ],
    [
        1163.4581029537467,
        294.0776136900845
    ],
    [
        60.292249985346714,
        159.44951143338903
    ],
    [
        206.52235686538953,
        484.1728091251642
    ],
    [
        699.7071909309717,
        314.25791566473566
    ],
    [
        1088.7251365404184,
        346.39979085417906
    ],
    [
        1007.7312776448081,
        369.33270769157514
    ],
    [
        126.72132425672989,
        129.71942422203705
    ],
    [
        1153.982244559736,
        177.53641160593705
    ],
    [
        798.1412418030955,
        316.98021950342087
    ],
    [
        607.1754315645052,
        561.7256679965337
    ],
    [
        291.4580407299021,
        159.11605291374877
    ],
    [
        515.5172090669915,
        197.47462569083092
    ],
    [
        410.0855742227772,
        441.5716261048907
    ],
    [
        870.4546636256161,
        334.8516031190896
    ],
    [
        1245.3771924204066,
        244.35736880720398
    ],
    [
        783.3677963212479,
        415.90084696683857
    ],
    [
        310.58640601619663,
        83.13828940927775
    ],
    [
        174.1702383829205,
        35.14696608284008
    ],
    [
        1235.2916653842726,
        332.3240397846128
    ],
    [
        219.6942991525182,
        112.13337168516395
    ],
    [
        547.8012879680551,
        480.0796569863155
    ],
    [
        1227.0041509024338,
        309.06816289567854
    ],
    [
        1244.9716885677417,
        446.6046680611088
    ],
    [
        407.540608659095,
        556.4570604341739
    ],
    [
        1343.5091628058158,
        312.98740498374593
    ],
    [
        1434.7567720767674,
        358.3821276619291
    ],
    [
        274.06287832802263,
        139.20090418966402
    ],
    [
        50.71093620176793,
        479.77946072325125
    ],
    [
        1317.146119163454,
        364.73743394572983
    ],
    [
        697.3191120262167,
        350.7431157964602
    ],
    [
        596.2935155482218,
        418.449461649128
    ],
    [
        456.50543166177874,
        37.67451095394748
    ],
    [
        110.41358057113831,
        79.81244167249314
    ],
    [
        225.229184146219,
        171.10036436831044
    ],
    [
        434.1920612135193,
        608
    ],
    [
        936.2644260089583,
        476.84610029946714
    ],
    [
        900.9018363289957,
        371.1827951028375
    ],
    [
        604.4861328401405,
        495.90309882634017
    ],
    [
        864.1109183956872,
        567.5989080177701
    ],
    [
        709.3086963409696,
        463.8816503361661
    ],
    [
        763.592576104912,
        499.8116760803944
    ],
    [
        925.5274353469786,
        426.686154125065
    ],
    [
        1384.1850182060375,
        550.2023908065461
    ],
    [
        1165.7726570065581,
        503.03381154735564
    ],
    [
        1098.2539341035972,
        537.6239738956626
    ],
    [
        869.6412052305462,
        589.1692558739237
    ],
    [
        1486,
        489.126982067138
    ],
    [
        1416.008350049507,
        276.2022351019813
    ],
    [
        1147.1004539740031,
        524.5348448942823
    ],
    [
        1028.667545527278,
        492.71173517002046
    ],
    [
        1444.978728270894,
        399.4455742039031
    ],
    [
        1037.3359908020652,
        523.7415385946093
    ]
]
m = gp.Model(" rectOCC ")
# m.setParam('nonconvex', 2)
# Create variables
x = {}
y = {}
a = {}
b = {}
c = {}
d = {}
BigM = 1000000
border = [1536, 658]
for i in range(0, len(bianchang)):
    # add去除遮挡之后的坐标
    x[i] = m.addVar(name="x" + str(i))
    y[i] = m.addVar(name="y" + str(i))
    for j in range(0, len(bianchang)):
        # add 0/1变量
        a[i, j] = m.addVar(vtype=GRB.BINARY, name="a_" + str(i) + '_' + str(j))
        b[i, j] = m.addVar(vtype=GRB.BINARY, name="b_" + str(i) + '_' + str(j))
        c[i, j] = m.addVar(vtype=GRB.BINARY, name="c_" + str(i) + '_' + str(j))
        d[i, j] = m.addVar(vtype=GRB.BINARY, name="d_" + str(i) + '_' + str(j))

# Set objective
obj = QuadExpr(0)
for i in range(0, len(bianchang)):
    obj.addTerms(1, x[i], x[i])
    obj.addTerms(1, y[i], y[i])
    obj.addTerms(-2 * center[i][0], x[i])
    obj.addTerms(-2 * center[i][1], y[i])
# for i in range(0, len(bianchang)):
#     for j in range(0, len(bianchang)):
#         obj.addTerms(1, a[i, j], a[i, j])
#         obj.addTerms(1, b[i, j], b[i, j])
m.setObjective(obj, GRB.MINIMIZE)

# Add constraint c1_ rectangle overlap
for i in range(0, len(bianchang)):
    for j in range(0, len(bianchang)):
        if i != j:
            m.addConstr(x[i] - x[j] + BigM * (1 - a[i, j]) >= bianchang[i], name='right_' + str(i) + '_' + str(j))
            m.addConstr(x[j] - x[i] + BigM * (1 - b[i, j]) >= bianchang[j], name='left_' + str(i) + '_' + str(j))
            m.addConstr(y[i] - y[j] + BigM * (1 - c[i, j]) >= bianchang[i], name='bottom_' + str(i) + '_' + str(j))
            m.addConstr(y[j] - y[i] + BigM * (1 - d[i, j]) >= bianchang[j], name='top_' + str(i) + '_' + str(j))
            # m.addConstr(c[i, j] >= (bianchang[i] + bianchang[j]) * 25)
            # m.addConstr(d[i, j] >= (bianchang[i] + bianchang[j]) * 25)

# Add constraint c3_ direction a,b,c,d
for i in range(0, len(bianchang)):
    for j in range(0, len(bianchang)):
        if i != j:
            m.addConstr(a[i, j] + b[i, j] + c[i, j] + d[i, j] == 1, name="dir_" + str(i) + '_' + str(j))

# Add constraint border
for i in range(len(bianchang)):
    m.addConstr(0 <= x[i], name='border1_' + str(i))
    m.addConstr(x[i] <= border[0] - bianchang[i], name='border2_' + str(i))
    m.addConstr(bianchang[i] <= y[i], name='border3_' + str(i))
    m.addConstr(y[i] <= border[1], name='border4_' + str(i))

# Optimize model
m.setParam('MIPFocus', 1)
m.setParam('MIPGap', 1)
m.setParam('TimeLimit', 25)
m.optimize()
m.write("gd.lp")
# 打印结果
print("\n\n-----optimal value-----")
# print('......', x)

#
for key in x.keys():
    print(x[key].VarName, x[key].x)
    print(y[key].VarName, y[key].x)
for key in a.keys():
    print(a[key].VarName, a[key].x)
    print(b[key].VarName, b[key].x)
    print(c[key].VarName, c[key].x)
    print(d[key].VarName, d[key].x)
    # if(x[key]> 0 ):
    #    print(x[key] + ' = ', x[key])

ans = {}
ii = 0
for key in range(len(bianchang)):
    ans[str(ii)] = {'x': x[key].x, 'y': y[key].x, 'width': bianchang[ii] * 5, 'height': bianchang[ii] * 5}
    ii += 1

with open(os.getcwd() + '/layout_ans.json', 'w') as f:
    json.dump(ans, f, indent=4, ensure_ascii=True)
